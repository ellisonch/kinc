configuration
	<k type="computation"> $PGM </k>

syntax
	s : int
	zero : int

rule <k> fakesymbol() => q(), label01(), y(), w() </k>

rule <k> test1(a(), T:listk) => T </k>
rule <k> test2(a(), b(), T:listk) => a() ~> T </k>

rule <k> list1(a(), b() => c(), d()) </k>
rule <k> list2((a()) => (c(), d())) </k>
rule <k> list3((a(), b()) => (c())) </k>
rule <k> list4((a(), b() => c(), d()), e(), f()) </k>
rule <k> list5((a() => c(), d()), e(), f()) </k>
rule <k> list6((a(), b() => c()), e(), f()) </k>
rule <k> list7(z(), (a(), b() => c(), d()), e(), f()) </k>
rule <k> list8(z(), (a() => c(), d()), e(), f()) </k>
rule <k> list9(z(), (a(), b() => c()), e(), f()) </k>

rule <k> list10(a(), T:listk => T, T) </k>

rule <k> list11((a() => b(), e()), (c() => d())) </k>

rule <k> list12() ~> L:listk => b(), L, c(L), L, d(), L, L </k>

rule <k> label01((q => z)(X:listk)) </k>
rule <k> (label02 => z)(X:listk) </k>
rule <k> label03() ~> (a() => b()) ~> ('LV => q)() </k>
rule <k> label04() ~> (a() => 'LV()) ~> ('LV => q)() </k>

// ~> (a => LV)()

// doesn't compile due to nonleftlinear
// rule <k> (nll(X, X) => X) </k>

rule <k> (crazy(a(), b(), c(), d(), e()) => a()) </k>

rule <k> (containsList1(X:listk) => containsList2(X)) </k>

rule <k> sorts01(X:int) => a() </k>
rule <k> sorts02(X:int) => a() </k>
rule <k> sorts03(X!:int) => a() </k>
rule <k> sorts04(X!:int) => a() </k>

rule <k> foo((plus(s(N), M:int) => plus(N, s(M)))) </k>
rule <k> foo((plus(zero(), N) => N)) </k>


rule <k> (plus(s(N), M:int) => plus(N, s(M))) </k>
rule <k> (plus(zero(), N) => N) </k>

rule <k> (var(H, T:listk) => var(T)) </k>

rule <k> (holder(a()) => holder(a(), b())) </k>

rule <k> z((a() => b())) </k>

rule <k> (empty(T:listk) => T) </k>
