/[ \t\r\n]/ { /* Skip blanks and tabs. */ }

/<[a-z][_a-zA-Z-]*/ {
	name := strings.TrimLeft(yylex.Text(), "<")
	lval.str = name
	if v, ok := CellTypes[name]; ok {
		if v == "k" {
			return TOK_CELL_BEGIN_K
		}
		if v == "bag" {
			return TOK_CELL_BEGIN_BAG
		}
		if v == "map" {
			return TOK_CELL_BEGIN_MAP
		}
	}
	return TOK_CELL_BEGIN_K
}

/,/ { return ',' }
/\(/ { return '(' }
/\)/ { return ')' }
/\[/ { return '[' }
/\]/ { return ']' }
/:/ { return ':' }
/</ { return '<' }
/"/ { return '"' }
/|->/ { return TOK_MAPS_TO }


/\.\.\.<\// { return TOK_CELL_RIGHT_OPEN }
/<\// { return TOK_CELL_RIGHT_CLOSED }
/>\.\.\./ { return TOK_CELL_LEFT_OPEN }
/>/ { return '>' }
/=>/ { return TOK_ARROW }
/=/ { return '=' }
/~>/ { return TOK_KRA }
/configuration/ { return TOK_CONFIGURATION }
/rule/ { return TOK_RULE }
/when/ { return TOK_WHEN }
/#?_?[a-z][_a-zA-Z-]*/ {
	lval.str = string(yylex.Text())
	return TOK_LC_NAME
}
/#?_?[A-Z][_a-zA-Z-]*/ {
	lval.str = string(yylex.Text())
	return TOK_UC_NAME
}

// 
package kinc

// import "os"
// import "strconv"
// type yySymType KincSymType

// /[0-9]*/ { lval.i64,_ = strconv.ParseInt(string(yylex.Text()), 10, 64); return TOK_INTEGER } 
// /./ { return int(yylex.Text()[0]) }